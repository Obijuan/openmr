#!/usr/bin/python

#####################################################################
# snakegen.py
#####################################################################

"""
	Generates the xml code for a given snake configuration with REPY-2.0

"""

__author__ = "David Estevez-Fernandez"
__license__ = 'GPLv3 license'

from optparse import OptionParser

def snakegen( axis_dist, n_modules, alternating=False):
	"""
		Returns a string containing the xml code for the robot
	"""

	# Define main base strings to be used
	############################################################################
	header= """
<!-- Kusanagi-%i
	 Modular snake made from %i REPY-2.0 modules 

     Auto-generated by snakegen.py -->	

<Robot name="Kusanagi-%i">
	<!-- Loading modules from files -->""" % ( n_modules, n_modules, n_modules )

	first_robot="""
	<Robot prefix="M1_" file="REPY-2.0.robot.xml"></Robot>
"""

	robot="""
	<Robot prefix="M{}_" file="REPY-2.0.robot.xml">
		<translation>0 0 {}</translation>
	</Robot>
"""

	joint = """
	<Robot name="M{0}_REPY-2.0">
		<KinBody name="M{0}_REPY-2.0">
			<Joint name="dummy{1}" type="hinge" enable="false">
				<Body>M{1}_Head</Body>
				<Body>M{0}_Body</Body>
        		<axis>0 0 1</axis>
       			<anchor>0 0 {2}</anchor>
       			<maxtorque>0.4</maxtorque>
        		<maxvel>4.5</maxvel>
        		<limitsdeg>{3} {4}</limitsdeg>
			</Joint>
		</KinBody>
	</Robot>
"""

	footer = "</Robot>"

	# Define robot import strings by using format
	# Define dummy joints by using format
	all_robots = ''
	all_joints = ''

	for i in range(2,n_modules+1):
		all_robots += robot.format(str(i), str(0.001*axis_dist*(i-1)*2) )

		if alternating:
			if i%2==0:
				all_joints += joint.format( str(i), str(i-1), str(0.001*axis_dist*(i-1)*2), '45', '45') 
			else:
				all_joints += joint.format( str(i), str(i-1), str(0.001*axis_dist*(i-1)*2), '-45', '-45') 
		else:
			all_joints += joint.format( str(i), str(i-1), str(0.001*axis_dist*(i-1)*2), '0', '0') 


	return header + first_robot + all_robots + "\n\t<!-- Redefine robots to add dummy links to join them -->" +  all_joints + footer
#	with open( filepath, 'w') as f:
		
def saveRobot( robot, n_modules='n', filepath=""):
	"""
		Saves the robot in a xml file
	"""
	if filepath == "":
		filepath = "./Kusanagi-"+str(n_modules)+".robot.xml"
	
	with open( filepath, 'w') as f:
		f.write( robot)
		f.close()
	
def main():

	############################################################################
	# Parse command line arguments
	############################################################################

	usageStr = """ 
	snakegen.py <options>
	"""

	parser = OptionParser( usageStr)
	parser.add_option('-d', dest='axis_dist', type='float', 
					  help='distance from bottom to axis', metavar='AXIS_H', default=41.3177)
	parser.add_option('-n', dest='n_modules', type='int', help='number of modules',
					  metavar='N_MODULES', default=2)
	parser.add_option('-a', '--alternating', dest='alternating', action='store_true',
					  help='if present, modules will alternate orientation', default=False)
	parser.add_option('-o', '--output-file', dest='filepath', type='string',
					  help='output file path', metavar='PATH', default='')

	options, notUnderstood = parser.parse_args()
	
	if ( len(notUnderstood) != 0):
		raise Exception('Command line input not understood: ' + str(notUnderstood) )

	axis_dist = options.axis_dist
	n_modules = options.n_modules
	alternating = options.alternating
	filepath = options.filepath
	
	saveRobot( snakegen( axis_dist, n_modules, alternating),n_modules, filepath)
	 

if __name__ == '__main__':
	main()
